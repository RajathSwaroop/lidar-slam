#include "Mapper.h"
#include "KeyFrame.h"
#include "ProcessPointCloud.h"

#include <ros/ros.h>


Mapper::Mapper()
{
    reference.reset( new pcl::PointCloud<pcl::PointXYZI> );
    query.reset( new pcl::PointCloud<pcl::PointXYZI> );
    odometry = Eigen::Affine3d::Identity();
    map_data.reset( new pcl::PointCloud<pcl::PointXYZI> );
    map.reset( new pcl::PointCloud<pcl::PointXYZI> );
    oct_map.reset( new pcl::octree::OctreePointCloudSearch<pcl::PointXYZI>(0.1) );
    oct_map->setInputCloud( map_data );
}

Mapper::~Mapper(){}

void Mapper::setId( const long long Id )
{
    id = Id;
}

void Mapper::setQueryCloud( const pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud )
{
    std::cout<< " query cloud size " << query->size() << " cloud size " << cloud->size() << std::endl;
    //*query = *cloud;
    pcl::copyPointCloud(*cloud, *query);
    std::cout<< " inside set query cloud " << std::endl;
}

void Mapper::setReferenceCloud( const pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud )
{
    std::cout<< " refernce cloud size " << reference->size() << " cloud size " << cloud->size() << std::endl;    
    //*reference = *cloud;
    pcl::copyPointCloud( *cloud, *reference);
    std::cout<< " inside set reference cloud " << std::endl;
}

void Mapper::getReferenceCloud( pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud )
{
    std::cout<< " refernce cloud size " << reference->size() << " cloud size " << cloud->size() << std::endl;
    pcl::copyPointCloud(*reference, *cloud);
    //*cloud = *reference;
    std::cout<< " inside get reference cloud " << std::endl;
}

void Mapper::initGICP()
{
    gicp.setTransformationEpsilon( 0.0000000001 );
    gicp.setRotationEpsilon( 0.000002 );
    //gicp.setCorrespondenceRandomness(1000);
    gicp.setEuclideanFitnessEpsilon(1);
    gicp.setMaxCorrespondenceDistance( 2.0 );
    gicp.setRANSACIterations( 0 );
    gicp.setMaximumIterations( 3 );
    
}

void Mapper::computePoseDifferenceGICP()
{
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();
    
    gicp.setInputTarget( reference );
    gicp.setInputSource( query );

    pcl::PointCloud<pcl::PointXYZI> result;

    gicp.align( result );
    
    Eigen::Matrix4f Transform = gicp.getFinalTransformation();

    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();    
    std::cout<< " time elapsed in compute pose difference " << std::chrono::duration_cast<std::chrono::milliseconds>(end-start).count() << std::endl;
    
    pose.translation()[0] = Transform(0, 3);
    pose.translation()[1] = Transform(1, 3);
    pose.translation()[2] = Transform(2, 3);

    //pose.linear() = Transform.block<2,2>(0, 0);
    for( int i = 0 ; i < 3 ; i++ )
    {
        for( int j = 0 ; j < 3 ; j++ )
        {
            pose.linear()(i,j) = Transform(i,j);
        }
    }

    
}


void Mapper::computePoseDifferenceNDT()
{
    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();

    ndt.setTransformationEpsilon (0.01);
    ndt.setStepSize (0.1);
    ndt.setResolution (1.0);
    ndt.setMaximumIterations (35);

    
    ndt.setInputTarget( reference );
    ndt.setInputSource( query );

    pcl::PointCloud<pcl::PointXYZI> result;

    ndt.align( result );
    
    Eigen::Matrix4f Transform = ndt.getFinalTransformation();

    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();    
    std::cout<< " time elapsed in compute pose difference " << std::chrono::duration_cast<std::chrono::milliseconds>(end-start).count() << std::endl;
    
    pose.translation()[0] = Transform(0, 3);
    pose.translation()[1] = Transform(1, 3);
    pose.translation()[2] = Transform(2, 3);

    //pose.linear() = Transform.block<2,2>(0, 0);
    for( int i = 0 ; i < 3 ; i++ )
    {
        for( int j = 0 ; j < 3 ; j++ )
        {
            pose.linear()(i,j) = Transform(i,j);
        }
    }

    
}

void Mapper::computeOdometry()
{
    odometry = odometry * pose; 
}

void Mapper::printOdometry()
{
    std::cout<< " translation in X: " << odometry.translation()[0] << " ";
    std::cout<< " Y: " << odometry.translation()[1] << " ";
    std::cout<< " Z: " << odometry.translation()[2] << std::endl;

    // convert eigen affine matrix to rpy and print
}

void Mapper::getOdometry( Eigen::Affine3d& odom )
{
    odom = odometry;
}


void Mapper::addToMap()
{
    pcl::PointCloud<pcl::PointXYZI>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZI>);
    pcl::transformPointCloud(*query, *cloud, odometry);
    std::cout<< " cloud size: " << cloud->size() << std::endl;
    //map->clear();
    if( id % 3 == 0 )
    {
        for( size_t it = 0; it < cloud->points.size(); it++ )
        {
            pcl::PointXYZI pt = cloud->points[it];

            if( !oct_map->isVoxelOccupiedAtPoint(pt) )
            {
                oct_map->addPointToCloud(pt, map_data );
                map->push_back( pt );
                //std::cout<< " points " << std::endl;
            }
        }
    }
    std::cout<< " map cloud size: " << map->size() << std::endl;
}

void Mapper::publishMap( sensor_msgs::PointCloud2& output )
{
    
    pcl::toROSMsg(*map, output);
    output.header.frame_id = "map";
    output.header.stamp = ros::Time::now();
    output.header.seq = id;
    
}

void Mapper::run(const pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud, const long long seq)
{
    
    pcl::PointCloud<pcl::PointXYZI>::Ptr reference_cloud (new pcl::PointCloud<pcl::PointXYZI>);
    pcl::PointCloud<pcl::PointXYZI>::Ptr query_cloud (new pcl::PointCloud<pcl::PointXYZI>);


    ProcessCloud pc;

    //std::cout<< " before voxel filter " << std::endl;
    
    if( cloud->size() > 0 )
    {
        pc.setInputCloud( cloud );
        pcl::copyPointCloud(*cloud, *query_cloud);
        //std::cout<< " set input cloud success " << std::endl;
        pc.filterPointCloud( query_cloud, "voxel" );
        //std::cout<< " success with filtering with result cloud size " << query_cloud->size() << std::endl;
    }

    //std::cout<< " before check for reference->size() == 0 " << std::endl;
    //std::cout<< " Id " << seq << std::endl;
    if( seq < 1 )
    {
        initGICP();
        //std::cout<< " set reference cloud " << std::endl;
        setReferenceCloud( query_cloud);
        //std::cout<< " returning " << std::endl;
        return;
    }

    //std::cout<< " check if query and reference have non zero size and process " << std::endl;
    if( query_cloud->size() > 0 && seq > 0 )
    {
        setId( seq );
        //std::cout<< " set Id " << std::endl;
        getReferenceCloud( reference_cloud );
        //std::cout<< " get reference cloud " << std::endl;
        setQueryCloud( query_cloud );
        //std::cout<< " set query " << std::endl;
        computePoseDifferenceGICP();
        //std::cout<< " compute pose difference " << std::endl;
        computeOdometry( );
        //std::cout<< " compute odometry " << std::endl;
        printOdometry( );
        addToMap( );
        setReferenceCloud( query_cloud );
    }
        
}

