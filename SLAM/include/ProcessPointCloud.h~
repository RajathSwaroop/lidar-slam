#include <iostream>
#include <string>

#include <pcl/point_types.h>
#include <pcl/point_cloud.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/conversions.h>
#include <pcl_conversions/pcl_conversions.h>

class ProcessCloud
{
    
public:

    long long getId();
    void setInputCloud( const pcl::PointCloud<pcl::PointXYZI>::Ptr& input );
    void getCloud( pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud_ );
    void computePoseDifference( const pcl::PointCloud<pcl::PointXYZI>::Ptr& query_, const pcl::PointCloud<pcl::PointXYZI>::Ptr& reference_, Eigen::Affine3d& pose );
    void VoxelSampling( pcl::PointCloud<pcl::PointXYZI>::Ptr& result, float leafsize );
    void filterPointCloud( pcl::PointCloud<pcl::PointXYZI>::Ptr& result, std::string type );
    
    //void 
private:
    long long seqId;
    pcl::PointCloud<pcl::PointXYZI>::Ptr cloud;// (new pcl::PointCloud<pcl::PointXYZI>);


};
